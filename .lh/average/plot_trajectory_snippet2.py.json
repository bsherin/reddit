{
    "sourceFile": "average/plot_trajectory_snippet2.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1730243323036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1730243323036,
            "name": "Commit-0",
            "content": "import matplotlib as mpl\nfrom matplotlib.colors import rgb2hex\nimport copy\nimport plotly.graph_objects as go\n\nimport imp\nimport plotly.io as pio\nimport io\nimport base64\nimport os\nimport kaleido\n\ndef get_col_types(pdf):\n    col_types = {}\n    for k in pdf.iloc[0].keys():\n        col_types[k] = type(pdf.iloc[0][k])\n    return col_types\n\ndef convert_output(fig):\n\n    buf = io.BytesIO()\n    fig.write_image(buf, format='svg')  # Set format as 'svg'\n    buf.seek(0)\n    data_uri = base64.b64encode(buf.read()).decode('utf-8')\n    img_tag = f'<img style=\"width: 100%\" src=\"data:image/svg+xml;base64,{data_uri}\" alt=\"Plotly Image\"/>'\n    return img_tag\n    \ndef plot_trajectory(df, x_axis, y_axis, \n                    width=1000, height=500, \n                    fn=None, fv=None, fk=None, xstrings=None,\n                    title_string=\"\", marker_size=10,\n                    top_margin=65, bottom_margin=75, right_margin=20, left_margin=20,\n                    title_font_size=12,\n                    theme=\"ggplot2\"):\n    filtered_df = df.copy(deep=True)\n    col_types = get_col_types(df)\n    for col, typ in col_types.items():\n        try:\n            filtered_df[col] = filtered_df[col].astype(typ)\n        except:\n            filtered_df[col] = filtered_df[col].astype(str)\n            print(f\"Column {col} recast to string\")\n    if fn is not None:\n        print(\"got a filter\")\n        if fn in col_types:\n            fv = col_types[fn](fv)\n        if fk == \"==\":\n            filtered_df = filtered_df[filtered_df[fn] == fv]\n        elif fk == \"<=\":\n            filtered_df = filtered_df[filtered_df[fn] <= fv]\n        else:\n            print('filtering greater than or equal')\n            filtered_df = filtered_df[filtered_df[fn] >= fv]\n        filter_string = (f\"<b>{fn}</b>:{fk}{fv}\")\n        filter_summary_string = (f\"{fn}:{fk}{fv}\")\n        \n    fig = go.Figure()\n    \n    layout_spec = {\n        \"height\": height,\n        \"width\": width,\n        \"template\": theme,\n        \"xaxis\": {\"title\": x_axis},\n        \"yaxis\": {\"title\": y_axis},\n        \"margin\": {\n            \"t\": top_margin, \n            \"b\": bottom_margin, \n            \"r\": right_margin,\n            \"l\": left_margin\n        },\n    }\n\n    tstring = title_string\n    summary = f\"{y_axis} v. {x_axis}\"\n    if fn is not None:\n        tstring += \"<br>\" + filter_string\n        summary += \" \" + filter_summary_string\n\n    layout_spec[\"title\"] = {\n        \"text\": tstring, \n        \"font\": {\"size\": title_font_size},\n    }\n\n    tlist_unique = [None]\n    fdf = filtered_df\n    mode = \"markers\"\n    text = None\n    textposition = None\n    textfont = None\n    fig.add_trace(go.Scatter(\n        x=fdf[x_axis].tolist(),\n        y=fdf[y_axis].tolist(), \n        mode=mode,\n        marker=dict(size=marker_size),\n        text=text,\n        textfont=textfont,\n        textposition=textposition))\n    if xstrings is not None:\n        tickvals = [t[0] for t in xstrings]\n        ticktext = [t[1] for t in xstrings]\n        fig.update_xaxes(\n            tickmode='array',\n            tickvals=tickvals,\n            ticktext=ticktext\n        )\n    fig.update_layout(layout_spec)\n    return convert_output(fig)"
        }
    ]
}
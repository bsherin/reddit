{
    "sourceFile": "average/average_trajectories.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1729877526844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729877956495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n             \"num_phases_trajectory_df\": getattr(Tile, \"num_phases_trajectory_df\"),\n             \"raw_post_count_trajectory_df\": getattr(Tile, \"raw_post_count_trajectory_df\"),\n             \"time_trajectory_df\": getattr(Tile, \"time_trajectory_df\"),\n             \"experience_trajectory_df\": getattr(Tile, \"experience_trajectory_df\"),\n-            \"ntokens_bins_trajectory_df\": getattr(Tile, \"ntokens_bins_trajectory_df\"),\n+            # \"ntokens_bins_trajectory_df\": getattr(Tile, \"ntokens_bins_trajectory_df\"),\n             \"param_df\": getattr(Tile, \"param_df\"),\n             \"key_info\": getattr(Tile, \"key_info\"),\n             \"uids\": getattr(Tile, \"uids\"),\n             \"subreddit\": getattr(Tile, \"subreddit\"),\n"
                },
                {
                    "date": 1729893207693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,12 @@\n     \n \n print(\"done with globals\")\n class AverageTrajectories():\n-    def __init__(self, folder_of_models):\n+    def __init__(self, folder_of_models, min_posts=2000):\n         self.folder_of_models = folder_of_models\n         self.html_table = html_table\n+        self.min_posts = min_posts\n         return\n \n     def display_status(self, text):\n         print(text)\n@@ -137,9 +138,9 @@\n             \"seeds\": getattr(Tile, \"seeds\"),\n             \"is_exp\": getattr(Tile, \"is_exp\"),\n         }\n \n-        rclass = BuildAverageTrajectoryReport(results)\n+        rclass = BuildAverageTrajectoryReport(results, min_posts=self.min_posts)\n         the_html = rclass.render_content()\n         if is_exp:\n             fname = f\"{subreddit}_avg_exp\"\n         else:\n@@ -148,6 +149,6 @@\n             f.write(the_html)\n \n if __name__ == '__main__':\n     print(\"starting\")\n-    Tile = AverageTrajectories(sys.argv[1])\n+    Tile = AverageTrajectories(sys.argv[1], sys.argv[2)\n     Tile.render_content()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729893253717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,6 +149,6 @@\n             f.write(the_html)\n \n if __name__ == '__main__':\n     print(\"starting\")\n-    Tile = AverageTrajectories(sys.argv[1], sys.argv[2)\n+    Tile = AverageTrajectories(sys.argv[1], sys.argv[2])\n     Tile.render_content()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1729877526844,
            "name": "Commit-0",
            "content": "print(\"starting\")\nimport pickle\nimport json\nimport sys\nimport pickle\nimport os\nimport pandas as pd\nfrom pandas import Timedelta\nimport re\nimport json\n\nfrom build_average_trajectory_report import BuildAverageTrajectoryReport\nfrom utilities import html_table\n\ny_axis_labels = {\n    \"num_phases\": \"phase\",\n    \"raw_post_count\": \"posts\",\n    \"time\": \"weeks\",\n    \"experience\": \"pseudo weeks\",\n    \"ntokens_bins\": \"ntokens\"\n}\n\nstage_kinds = [\"num_phases\", \"raw_post_count\", \"time\", \"experience\"]\n\ndef ds(text):\n    print(text)\n\ndef load_pickle_or_parquet(path):\n    fname, ext = os.path.splitext(path)\n    if ext == \".parquet\":\n        return pd.read_parquet(path)\n    else:\n        return pd.read_pickle(path)\n\ndef is_exp_sampling(param_df):\n    return \"threshold_in_days\" in param_df.index\n\ndef compare_dataframes(df1, df2):\n    if df1.index.equals(df2.index) and (df1['value'] == df2['value']).all():\n        return True\n    else:\n        return False\n\ndef compare_dicts(d1, d2):\n    for k in d1.keys():\n        if not d1[k] == d2[k]:\n            return False\n    return True\n    \n\nprint(\"done with globals\")\nclass AverageTrajectories():\n    def __init__(self, folder_of_models):\n        self.folder_of_models = folder_of_models\n        self.html_table = html_table\n        return\n\n    def display_status(self, text):\n        print(text)\n\n    def render_content(self):\n        trajectories = []\n        params = []\n        \n        subreddit = None\n        \n        uids = []\n        seeds = []\n        \n        common_param_df = None\n        common_key_info = None\n        \n        for item in os.listdir(self.folder_of_models):\n            item_path = os.path.join(self.folder_of_models, item)\n            # Check if the item is a directory\n            if os.path.isdir(item_path):\n                fdict = {}\n                for stage_kind in stage_kinds:\n                    fdict[stage_kind] = load_pickle_or_parquet(f\"{item_path}/{stage_kind}_trajectory_df.parquet\")\n                trajectories.append(fdict)\n                param_df = pd.read_csv(f\"{item_path}/parameters.txt\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n                uids.append(param_df.loc[\"uid\"].value)\n                seeds.append(param_df.loc[\"seed\"].value)\n                param_df = param_df.drop([\"uid\", \"seed\"])\n                if subreddit is None:\n                    bn = os.path.basename(item_path)\n                    subreddit = re.findall(\"^(.*?)_snapshots\", bn)[0]\n                    is_exp = is_exp_sampling(param_df)\n                    common_param_df = param_df\n                if not compare_dataframes(param_df, common_param_df):\n                    the_html = f\"Got unmatched params for uid {uids[-1]} with original uid {uids[0]}<br>\"\n                    the_html += self.html_table(param_df, sidebyside=True)\n                    the_html += self.html_table(common_param_df, sidebyside=True)\n                    return the_html\n                with open(f\"{item_path}/trajectory_key_info.json\", \"r\") as f:\n                    key_info = json.load(f)\n                key_info[\"k\"] = round(float(key_info[\"k\"]), 1)\n                if common_key_info is None:\n                    common_key_info = key_info\n                if not compare_dicts(key_info, common_key_info):\n                    the_html = f\"Got unmatched key_info for uid {uids[-1]} with original uid {uids[0]}<br>\"\n                    the_html += self.html_table(key_info, sidebyside=True)\n                    the_html += self.html_table(common_key_info, sidebyside=True)\n        \n        self.param_df = common_param_df\n        self.key_info = common_key_info\n        self.uids = uids\n        self.seeds = seeds\n        self.subreddit = subreddit\n        self.is_exp = is_exp\n        \n        if self.is_exp:\n            self.table_html = f\"<h4>{subreddit}_exp</h4>\"\n        else:\n            self.table_html = f\"<h4>{subreddit}</h4>\"\n        self.table_html += self.html_table(common_param_df, sidebyside=True)\n        self.table_html += self.html_table(common_key_info, sidebyside=True)\n        self.table_html += \"<br>\"\n        ds(\"computing averages\")\n        for stage_kind in stage_kinds:\n            dfs = []\n            for fdict in trajectories:\n                dfs.append(fdict[stage_kind])\n            combined_df = pd.concat(dfs)\n            result_df = combined_df.groupby(y_axis_labels[stage_kind]).mean().reset_index()\n            setattr(self, f\"{stage_kind}_trajectory_df\", result_df)\n        results = {\n            \"num_phases_trajectory_df\": getattr(Tile, \"num_phases_trajectory_df\"),\n            \"raw_post_count_trajectory_df\": getattr(Tile, \"raw_post_count_trajectory_df\"),\n            \"time_trajectory_df\": getattr(Tile, \"time_trajectory_df\"),\n            \"experience_trajectory_df\": getattr(Tile, \"experience_trajectory_df\"),\n            \"ntokens_bins_trajectory_df\": getattr(Tile, \"ntokens_bins_trajectory_df\"),\n            \"param_df\": getattr(Tile, \"param_df\"),\n            \"key_info\": getattr(Tile, \"key_info\"),\n            \"uids\": getattr(Tile, \"uids\"),\n            \"subreddit\": getattr(Tile, \"subreddit\"),\n            \"seeds\": getattr(Tile, \"seeds\"),\n            \"is_exp\": getattr(Tile, \"is_exp\"),\n        }\n\n        rclass = BuildAverageTrajectoryReport(results)\n        the_html = rclass.render_content()\n        if is_exp:\n            fname = f\"{subreddit}_avg_exp\"\n        else:\n            fname = f\"{subreddit}_avg\"\n        with open(f\"{self.folder_of_models}/{fname}.html\", \"w\") as f:\n            f.write(the_html)\n\nif __name__ == '__main__':\n    print(\"starting\")\n    Tile = AverageTrajectories(sys.argv[1])\n    Tile.render_content()"
        }
    ]
}
{
    "sourceFile": "average/build_average_trajectory_report.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1729877564554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729878103546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n         self.source = source\n         self.min_posts = min_posts\n         self.marker_size = marker_size\n-        self.html_table\n+        self.html_table = html_table\n         return\n \n     def display_status(self, text):\n         print(text)\n"
                },
                {
                    "date": 1729878478792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,17 +15,17 @@\n     \"num_phases\": \"phase\",\n     \"raw_post_count\": \"posts\",\n     \"time\": \"weeks\",\n     \"experience\": \"pseudo weeks\",\n-    \"ntokens_bins\": \"ntokens\"\n+    # \"ntokens_bins\": \"ntokens\"\n }\n \n bin_key_dict = {\n     \"num_phases\": \"num_phases\",\n     \"raw_post_count\": \"post_bin\",\n     \"time\": \"time_bin_weeks\",\n     \"experience\": \"exp_bin_size\",\n-    \"ntokens_bins\": \"ntokens_bin_size\"\n+    # \"ntokens_bins\": \"ntokens_bin_size\"\n }\n class BuildAverageTrajectoryReport():\n     def __init__(self, source, min_posts=2000, marker_size=8):\n \n"
                },
                {
                    "date": 1730150159547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         source = self.source\n         param_df = source[\"param_df\"]\n         subreddit = source[\"subreddit\"]\n         uids = source[\"uids\"]\n-        seeds = source[\"seeds\"]\n+        run_numbers = source[\"run_numbers\"]\n         key_info = source[\"key_info\"]\n         is_exp = source[\"is_exp\"]\n         \n         \n@@ -78,9 +78,9 @@\n         \n         the_html += \"<div class='trajectory-report'>\"\n         the_html += f\"<h5>{self.summary}</h5>\"\n         the_html += f\"<div>uids: {str(uids)}</div>\"\n-        the_html += f\"<div>seeds: {str(seeds)}</div>\"\n+        the_html += f\"<div>run_numbers: {str(run_numbers)}</div>\"\n         the_html += self.html_table(param_df, title=\"Model Parameters\", sidebyside=True)\n         the_html += self.html_table(key_info, title=\"ScoresToTrajectories Parameters\", sidebyside=True)\n         the_html += \"</div>\"\n         \n"
                },
                {
                    "date": 1730215797383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import pickle\n import json\n import sys\n import re\n+import os\n import pandas as pd\n \n from plot_trajectory_snippet2 import plot_trajectory\n from utilities import html_table\n@@ -26,12 +27,14 @@\n     \"experience\": \"exp_bin_size\",\n     # \"ntokens_bins\": \"ntokens_bin_size\"\n }\n class BuildAverageTrajectoryReport():\n-    def __init__(self, source, min_posts=2000, marker_size=8):\n+    def __init__(self, source, fn=\"nposts\", fv=2000, fk=\">=\", marker_size=8):\n \n         self.source = source\n-        self.min_posts = min_posts\n+        self.fn = fn\n+        self.fv = fv\n+        self.fk = fk\n         self.marker_size = marker_size\n         self.html_table = html_table\n         return\n \n@@ -52,9 +55,8 @@\n         run_numbers = source[\"run_numbers\"]\n         key_info = source[\"key_info\"]\n         is_exp = source[\"is_exp\"]\n         \n-        \n         the_html = \"\"\"\n             <style>\n                 .trajectory-report div {\n                     margin-top: 10px\n@@ -93,8 +95,28 @@\n             tstring = f\"<b>score vs {x_col}</b><br>{bin_key_dict[kind]}={key_info[bin_key_dict[kind]]}\"\n             the_html += plot_trajectory(df, x_col, \"score\", \n                                         marker_size=self.marker_size, title_string=tstring)\n             if \"nposts\" in df.columns:\n-                the_html += plot_trajectory(df, x_col, \"score\", fn=\"nposts\", fv=self.min_posts, fk=\">=\", \n+                the_html += plot_trajectory(df, x_col, \"score\", fn=self.fn, fv=self.fv, fk=self.fk, \n                                             marker_size=self.marker_size, top_margin=85, title_string=tstring)\n         \n\\ No newline at end of file\n-        return the_html\n+        return the_html\n+    \n+if __name__ == '__main__':\n+    print(\"starting\")\n+    # source, fn, fv, fk, marker_size=8\n+    source_pickle = sys.argv[1]\n+    with open(source_pickle, \"rb\") as f:\n+        source = pickle.load(f)\n+    folder = os.path.dirname(source_pickle)\n+    fn = sys.argv[2]\n+    fv = sys.argv[3]\n+    fk = sys.argv[4]\n+    Tile = BuildAverageTrajectoryReport(source, fn, fv, fk)\n+    the_html = Tile.render_content()\n+    if source[\"is_exp\"]:\n+        fname = f\"{source['subreddit']}_avg_exp_{fn}_{fk}_{str(fv)}\"\n+    else:    \n+        fname = f\"{source['subreddit']}_avg_{fn}_{fk}_{str(fv)}\"\n+    with open(f\"{folder}/{fname}.html\", \"w\") as f:\n+        f.write(the_html)\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1730215857503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n     with open(source_pickle, \"rb\") as f:\n         source = pickle.load(f)\n     folder = os.path.dirname(source_pickle)\n     fn = sys.argv[2]\n-    fv = sys.argv[3]\n+    fv = float(sys.argv[3])\n     fk = sys.argv[4]\n     Tile = BuildAverageTrajectoryReport(source, fn, fv, fk)\n     the_html = Tile.render_content()\n     if source[\"is_exp\"]:\n"
                },
                {
                    "date": 1730224536017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n             \n             tstring = f\"<b>score vs {x_col}</b><br>{bin_key_dict[kind]}={key_info[bin_key_dict[kind]]}\"\n             the_html += plot_trajectory(df, x_col, \"score\", \n                                         marker_size=self.marker_size, title_string=tstring)\n-            if \"nposts\" in df.columns:\n+            if self.fn in df.columns:\n                 the_html += plot_trajectory(df, x_col, \"score\", fn=self.fn, fv=self.fv, fk=self.fk, \n                                             marker_size=self.marker_size, top_margin=85, title_string=tstring)\n         \n         return the_html\n"
                },
                {
                    "date": 1730242020801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,19 +104,23 @@\n if __name__ == '__main__':\n     print(\"starting\")\n     # source, fn, fv, fk, marker_size=8\n     source_pickle = sys.argv[1]\n+    print(\"got source pickle\", source_pickle)\n     with open(source_pickle, \"rb\") as f:\n         source = pickle.load(f)\n     folder = os.path.dirname(source_pickle)\n     fn = sys.argv[2]\n     fv = float(sys.argv[3])\n     fk = sys.argv[4]\n     Tile = BuildAverageTrajectoryReport(source, fn, fv, fk)\n+    print(\"rendering content\")\n     the_html = Tile.render_content()\n+    print(\"go the html\")\n     if source[\"is_exp\"]:\n         fname = f\"{source['subreddit']}_avg_exp_{fn}_{fk}_{str(fv)}\"\n     else:    \n         fname = f\"{source['subreddit']}_avg_{fn}_{fk}_{str(fv)}\"\n+    print(\"writing to\", f\"{folder}/{fname}.html\")\n     with open(f\"{folder}/{fname}.html\", \"w\") as f:\n         f.write(the_html)\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1730242819810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,5 +122,9 @@\n         fname = f\"{source['subreddit']}_avg_{fn}_{fk}_{str(fv)}\"\n     print(\"writing to\", f\"{folder}/{fname}.html\")\n     with open(f\"{folder}/{fname}.html\", \"w\") as f:\n         f.write(the_html)\n+    print(\"converting to pdf\")\n+    import pdfkit\n+    pdfkit.from_file(f\"{folder}/{fname}.html\", f\"{folder}/{fname}.pdf\")\n+    print(\"done\")\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1730243309301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,6 @@\n         fname = f\"{source['subreddit']}_avg_{fn}_{fk}_{str(fv)}\"\n     print(\"writing to\", f\"{folder}/{fname}.html\")\n     with open(f\"{folder}/{fname}.html\", \"w\") as f:\n         f.write(the_html)\n-    print(\"converting to pdf\")\n-    import pdfkit\n-    pdfkit.from_file(f\"{folder}/{fname}.html\", f\"{folder}/{fname}.pdf\")\n     print(\"done\")\n     \n\\ No newline at end of file\n"
                }
            ],
            "date": 1729877564554,
            "name": "Commit-0",
            "content": "print(\"starting\")\nimport pickle\nimport json\nimport sys\nimport re\nimport pandas as pd\n\nfrom plot_trajectory_snippet2 import plot_trajectory\nfrom utilities import html_table\n\ndef ds(text):\n    print(text)\n\nstage_kind_dict = {\n    \"num_phases\": \"phase\",\n    \"raw_post_count\": \"posts\",\n    \"time\": \"weeks\",\n    \"experience\": \"pseudo weeks\",\n    \"ntokens_bins\": \"ntokens\"\n}\n\nbin_key_dict = {\n    \"num_phases\": \"num_phases\",\n    \"raw_post_count\": \"post_bin\",\n    \"time\": \"time_bin_weeks\",\n    \"experience\": \"exp_bin_size\",\n    \"ntokens_bins\": \"ntokens_bin_size\"\n}\nclass BuildAverageTrajectoryReport():\n    def __init__(self, source, min_posts=2000, marker_size=8):\n\n        self.source = source\n        self.min_posts = min_posts\n        self.marker_size = marker_size\n        self.html_table\n        return\n\n    def display_status(self, text):\n        print(text)\n\n    def render_content(self):\n        import sys\n        import os\n        if \"plot_trajectory_snippet\" in sys.modules:\n            del sys.modules[\"plot_trajectory_snippet\"]\n\n        \n        source = self.source\n        param_df = source[\"param_df\"]\n        subreddit = source[\"subreddit\"]\n        uids = source[\"uids\"]\n        seeds = source[\"seeds\"]\n        key_info = source[\"key_info\"]\n        is_exp = source[\"is_exp\"]\n        \n        \n        the_html = \"\"\"\n            <style>\n                .trajectory-report div {\n                    margin-top: 10px\n                }\n                .trajectory-report td {\n                    padding-top: 8px !important;\n                    padding-bottom: 8px !important;\n                }\n                .sidebyside-table {\n                    vertical-align: top;\n                    margin-top: 25px;\n                    margin-bottom: 25px;\n                    margin-right: 20px;\n                }\n            </style>\n        \"\"\"\n        if is_exp:\n            self.summary = f\"{subreddit}_avg_exp\"\n        else:\n            self.summary = f\"{subreddit}_avg\"\n        \n        the_html += \"<div class='trajectory-report'>\"\n        the_html += f\"<h5>{self.summary}</h5>\"\n        the_html += f\"<div>uids: {str(uids)}</div>\"\n        the_html += f\"<div>seeds: {str(seeds)}</div>\"\n        the_html += self.html_table(param_df, title=\"Model Parameters\", sidebyside=True)\n        the_html += self.html_table(key_info, title=\"ScoresToTrajectories Parameters\", sidebyside=True)\n        the_html += \"</div>\"\n        \n        for kind, x_col in stage_kind_dict.items():\n            ds(f\"processing kind {kind}\")\n            df = source[f\"{kind}_trajectory_df\"]\n            if df is None or type(df) == str or len(df) == 0:\n                continue\n            \n            tstring = f\"<b>score vs {x_col}</b><br>{bin_key_dict[kind]}={key_info[bin_key_dict[kind]]}\"\n            the_html += plot_trajectory(df, x_col, \"score\", \n                                        marker_size=self.marker_size, title_string=tstring)\n            if \"nposts\" in df.columns:\n                the_html += plot_trajectory(df, x_col, \"score\", fn=\"nposts\", fv=self.min_posts, fk=\">=\", \n                                            marker_size=self.marker_size, top_margin=85, title_string=tstring)\n        \n        return the_html"
        }
    ]
}
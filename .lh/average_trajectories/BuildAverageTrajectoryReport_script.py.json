{
    "sourceFile": "average_trajectories/BuildAverageTrajectoryReport_script.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1729874448623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729874633802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,13 @@\n import sys\n import re\n import pandas as pd\n \n+from plot_trajectory_snippet2 import plot_trajectory\n \n+def ds(text):\n+    print(text)\n+\n stage_kind_dict = {\n     \"num_phases\": \"phase\",\n     \"raw_post_count\": \"posts\",\n     \"time\": \"weeks\",\n@@ -20,21 +24,14 @@\n     \"time\": \"time_bin_weeks\",\n     \"experience\": \"exp_bin_size\",\n     \"ntokens_bins\": \"ntokens_bin_size\"\n }\n+class BuildAverageTrajectoryReport():\n+    def __init__(self, source, min_posts=2000, marker_size=8):\n \n-from plot_trajectory_snippet2 import plot_trajectory\n-\n-print(\"done with globals\")\n-class BuildAverageTrajectoryReport():\n-    def __init__(self, jsonfile):\n-        import textwrap\n-        with open(jsonfile, 'r') as file:\n-            config = json.load(file)\n-        self.TrajectoriesSource = config[\"TrajectoriesSource\"] if \"TrajectoriesSource\" in config else None\n-        self.min_posts = config[\"min_posts\"] if \"min_posts\" in config else 2000\n-        self.marker_size = config[\"marker_size\"] if \"marker_size\" in config else 8\n-        self.output_file = config[\"output_file\"] if \"output_file\" in config else None\n+        self.source = source\n+        self.min_posts = min_posts\n+        self.marker_size = marker_size\n         return\n \n     def display_status(self, text):\n         print(text)\n@@ -46,12 +43,11 @@\n         import sys\n         import os\n         if \"plot_trajectory_snippet\" in sys.modules:\n             del sys.modules[\"plot_trajectory_snippet\"]\n+\n         \n-        plot_trajectory = plot_trajectory_snippet.plot_trajectory\n-        \n-        source = Tiles[self.TrajectoriesSource]\n+        source = self.source\n         param_df = source[\"param_df\"]\n         subreddit = source[\"subreddit\"]\n         uids = source[\"uids\"]\n         seeds = source[\"seeds\"]\n"
                }
            ],
            "date": 1729874448623,
            "name": "Commit-0",
            "content": "print(\"starting\")\nimport pickle\nimport json\nimport sys\nimport re\nimport pandas as pd\n\n\nstage_kind_dict = {\n    \"num_phases\": \"phase\",\n    \"raw_post_count\": \"posts\",\n    \"time\": \"weeks\",\n    \"experience\": \"pseudo weeks\",\n    \"ntokens_bins\": \"ntokens\"\n}\n\nbin_key_dict = {\n    \"num_phases\": \"num_phases\",\n    \"raw_post_count\": \"post_bin\",\n    \"time\": \"time_bin_weeks\",\n    \"experience\": \"exp_bin_size\",\n    \"ntokens_bins\": \"ntokens_bin_size\"\n}\n\nfrom plot_trajectory_snippet2 import plot_trajectory\n\nprint(\"done with globals\")\nclass BuildAverageTrajectoryReport():\n    def __init__(self, jsonfile):\n        import textwrap\n        with open(jsonfile, 'r') as file:\n            config = json.load(file)\n        self.TrajectoriesSource = config[\"TrajectoriesSource\"] if \"TrajectoriesSource\" in config else None\n        self.min_posts = config[\"min_posts\"] if \"min_posts\" in config else 2000\n        self.marker_size = config[\"marker_size\"] if \"marker_size\" in config else 8\n        self.output_file = config[\"output_file\"] if \"output_file\" in config else None\n        return\n\n    def display_status(self, text):\n        print(text)\n\n    def html_table(self, text):\n        print(text)\n\n    def render_content(self):\n        import sys\n        import os\n        if \"plot_trajectory_snippet\" in sys.modules:\n            del sys.modules[\"plot_trajectory_snippet\"]\n        \n        plot_trajectory = plot_trajectory_snippet.plot_trajectory\n        \n        source = Tiles[self.TrajectoriesSource]\n        param_df = source[\"param_df\"]\n        subreddit = source[\"subreddit\"]\n        uids = source[\"uids\"]\n        seeds = source[\"seeds\"]\n        key_info = source[\"key_info\"]\n        is_exp = source[\"is_exp\"]\n        \n        \n        the_html = \"\"\"\n            <style>\n                .trajectory-report div {\n                    margin-top: 10px\n                }\n                .trajectory-report td {\n                    padding-top: 8px !important;\n                    padding-bottom: 8px !important;\n                }\n                .sidebyside-table {\n                    vertical-align: top;\n                    margin-top: 25px;\n                    margin-bottom: 25px;\n                    margin-right: 20px;\n                }\n            </style>\n        \"\"\"\n        if is_exp:\n            self.summary = f\"{subreddit}_avg_exp\"\n        else:\n            self.summary = f\"{subreddit}_avg\"\n        \n        the_html += \"<div class='trajectory-report'>\"\n        the_html += f\"<h5>{self.summary}</h5>\"\n        the_html += f\"<div>uids: {str(uids)}</div>\"\n        the_html += f\"<div>seeds: {str(seeds)}</div>\"\n        the_html += self.html_table(param_df, title=\"Model Parameters\", sidebyside=True)\n        the_html += self.html_table(key_info, title=\"ScoresToTrajectories Parameters\", sidebyside=True)\n        the_html += \"</div>\"\n        \n        for kind, x_col in stage_kind_dict.items():\n            ds(f\"processing kind {kind}\")\n            df = source[f\"{kind}_trajectory_df\"]\n            if df is None or type(df) == str or len(df) == 0:\n                continue\n            \n            tstring = f\"<b>score vs {x_col}</b><br>{bin_key_dict[kind]}={key_info[bin_key_dict[kind]]}\"\n            the_html += plot_trajectory(df, x_col, \"score\", \n                                        marker_size=self.marker_size, title_string=tstring)\n            if \"nposts\" in df.columns:\n                the_html += plot_trajectory(df, x_col, \"score\", fn=\"nposts\", fv=self.min_posts, fk=\">=\", \n                                            marker_size=self.marker_size, top_margin=85, title_string=tstring)\n        \n        self.report = the_html\n        \n        results = {\n            \"report\": getattr(Tile, \"report\"),\n            \"parameters\": self.get_parameters()\n        }\n        if self.output_file is not None:\n            f = open(self.output_file, \"wb\")\n            pickle.dump(results, f)\n            f.close()\n            return\n        else:\n            return results\n\nif __name__ == '__main__':\n    print(\"starting\")\n    Tile = BuildAverageTrajectoryReport(sys.argv[1])\n    Tile.render_content()"
        }
    ]
}
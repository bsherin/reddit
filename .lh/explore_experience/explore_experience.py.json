{
    "sourceFile": "explore_experience/explore_experience.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1730054004901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730054351753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,24 +6,33 @@\n import re\n import datetime\n import pandas as pd\n import numpy as np\n+from utilities import ds, html_table\n \n def load_pickle_or_parquet(path):\n     fname, ext = os.path.splitext(path)\n     if ext == \".parquet\":\n         return pd.read_parquet(path)\n     else:\n         return pd.read_pickle(path)\n-    \n \n+import os\n+\n+def find_subfolder(base_path, end_string):\n+    for root, dirs, files in os.walk(base_path):\n+        for dir_name in dirs:\n+            if dir_name.endswith(end_string):\n+                return os.path.join(root, dir_name)\n+    return None  # If no subfolder is found\n+\n print(\"done with globals\")\n class ExploreExperience():\n     def __init__(self, subreddit, uid, base_path):\n         self.subreddit = subreddit\n         self.uid = uid\n         self.base_path = base_path\n-        self.snapshot_folder = f\"{base_path}/{subreddit}/{subreddit}_snapshots/{uid}\"\n+        self.snapshot_folder = find_subfolder(f\"{base_path}/{subreddit}\", f\"_{uid}\")\n         return\n \n     def display_status(self, text):\n         print(text)\n@@ -42,27 +51,19 @@\n         keys = param_df.index.tolist()\n         for key in keys:\n             setattr(self, key, param_df.loc[key].value)\n         return\n-    \n-    \n-    \n         \n-        \n     def render_content(self):\n         ds(\"Getting snapshot params\")\n         global kb_model\n         \n         self.pull_param_vals()\n         \n-        base_path = \"/mydisk/reddit\"\n-        bn = os.path.basename(self.snapshot_folder)\n-        subreddit = re.findall(\"^(.*?)_snapshots\", bn)[0]\n-        \n         ds(\"Reading exp_df\")\n-        exp_df = load_pickle_or_parquet(f\"{base_path}/{subreddit}/{subreddit}_df_exp_true.parquet\")\n+        exp_df = load_pickle_or_parquet(f\"{self.base_path}/{self.subreddit}/{self.subreddit}_df_exp_true.parquet\")\n             \n-        score_start = f\"{subreddit}_scored\"\n+        score_start = f\"{self.subreddit}_scored\"\n         score_df = None\n         for item in os.listdir(self.snapshot_folder):\n             if item.startswith(score_start):\n                 ds(\"Reading score_df\")\n@@ -112,22 +113,15 @@\n                     \"median_exp\": median_exp\n                 })\n         \n         self.result_df = pd.DataFrame(result_list)\n-        the_html = self.html_table(overall) + self.html_table(self.result_df)\n+        the_html = html_table(overall) + html_table(self.result_df)\n         results = {\n             \"result_df\": getattr(Tile, \"result_df\"),\n             \"overall_median\": getattr(Tile, \"overall_median\"),\n             \"overall_mean\": getattr(Tile, \"overall_mean\"),\n             \"parameters\": self.get_parameters()\n         }\n-        if self.output_file is not None:\n-            f = open(self.output_file, \"wb\")\n-            pickle.dump(results, f)\n-            f.close()\n-            return\n-        else:\n-            return results\n \n if __name__ == '__main__':\n     print(\"starting\")\n     # subreddit, uid, base_path\n"
                },
                {
                    "date": 1730055220117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import datetime\n import pandas as pd\n import numpy as np\n from utilities import ds, html_table\n+from plot_trajectory_snippet2 import plot_trajectory\n \n def load_pickle_or_parquet(path):\n     fname, ext = os.path.splitext(path)\n     if ext == \".parquet\":\n@@ -24,15 +25,24 @@\n             if dir_name.endswith(end_string):\n                 return os.path.join(root, dir_name)\n     return None  # If no subfolder is found\n \n+def find_unpadded_model(base_path):\n+    for root, dirs, files in os.walk(base_path):\n+        for dir_name in dirs:\n+            if \"_snapshots_\" in dir_name:\n+                the_path = os.path.join(root, dir_name)\n+                param_df = pd.read_csv(f\"{the_path}/parameters.txt\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n+                if int(param_df.loc[\"end_buffer\"].value) == 0:\n+                    return the_path\n+    return None  # \n+\n print(\"done with globals\")\n class ExploreExperience():\n-    def __init__(self, subreddit, uid, base_path):\n+    def __init__(self, subreddit, base_path):\n         self.subreddit = subreddit\n-        self.uid = uid\n         self.base_path = base_path\n-        self.snapshot_folder = find_subfolder(f\"{base_path}/{subreddit}\", f\"_{uid}\")\n+        self.snapshot_folder = find_unpadded_model(f\"{base_path}/{subreddit}\")\n         return\n \n     def display_status(self, text):\n         print(text)\n@@ -120,10 +130,14 @@\n             \"overall_median\": getattr(Tile, \"overall_median\"),\n             \"overall_mean\": getattr(Tile, \"overall_mean\"),\n             \"parameters\": self.get_parameters()\n         }\n+        self.result_df.to_parquest(f\"{self.base_path}/{self.subreddit}/{self.subreddit}_exp_by_month.parquet\")\n+        html += plot_trajectory(self.result_df, \"true_month\", \"avg_exp\", marker_size=8)\n+        with open(f\"{self.base_path}/{self.subreddit}/exp_by_month.html\", 'w') as file:\n+            file.write(html)\n \n if __name__ == '__main__':\n     print(\"starting\")\n-    # subreddit, uid, base_path\n-    Tile = ExploreExperience(sys.argv[1], sys.argv[2], sys.argv[3])\n+    # subreddit, base_path\n+    Tile = ExploreExperience(sys.argv[1], sys.argv[2])\n     Tile.render_content()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730055444074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n             if \"_snapshots_\" in dir_name:\n                 the_path = os.path.join(root, dir_name)\n                 param_df = pd.read_csv(f\"{the_path}/parameters.txt\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n                 if int(param_df.loc[\"end_buffer\"].value) == 0:\n+                    print(f\"Found unpadded model at {the_path}\")\n                     return the_path\n     return None  # \n \n print(\"done with globals\")\n"
                },
                {
                    "date": 1730055635103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,17 +47,8 @@\n \n     def display_status(self, text):\n         print(text)\n \n-    def html_table(self, text):\n-        print(text)\n-\n-    def get_parameters(self):\n-        plist = []\n-        for opt_name in self.option_names:\n-            plist.append({\"name\": opt_name, \"value\": getattr(self, opt_name)})\n-        return plist\n-\n     def pull_param_vals(self):\n         param_df = pd.read_csv(f\"{self.snapshot_folder}/parameters.txt\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n         keys = param_df.index.tolist()\n         for key in keys:\n@@ -124,15 +115,9 @@\n                     \"median_exp\": median_exp\n                 })\n         \n         self.result_df = pd.DataFrame(result_list)\n-        the_html = html_table(overall) + html_table(self.result_df)\n-        results = {\n-            \"result_df\": getattr(Tile, \"result_df\"),\n-            \"overall_median\": getattr(Tile, \"overall_median\"),\n-            \"overall_mean\": getattr(Tile, \"overall_mean\"),\n-            \"parameters\": self.get_parameters()\n-        }\n+        html = html_table(overall) + html_table(self.result_df)\n         self.result_df.to_parquest(f\"{self.base_path}/{self.subreddit}/{self.subreddit}_exp_by_month.parquet\")\n         html += plot_trajectory(self.result_df, \"true_month\", \"avg_exp\", marker_size=8)\n         with open(f\"{self.base_path}/{self.subreddit}/exp_by_month.html\", 'w') as file:\n             file.write(html)\n"
                },
                {
                    "date": 1730055771866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n                 })\n         \n         self.result_df = pd.DataFrame(result_list)\n         html = html_table(overall) + html_table(self.result_df)\n-        self.result_df.to_parquest(f\"{self.base_path}/{self.subreddit}/{self.subreddit}_exp_by_month.parquet\")\n+        self.result_df.to_parquet(f\"{self.base_path}/{self.subreddit}/{self.subreddit}_exp_by_month.parquet\")\n         html += plot_trajectory(self.result_df, \"true_month\", \"avg_exp\", marker_size=8)\n         with open(f\"{self.base_path}/{self.subreddit}/exp_by_month.html\", 'w') as file:\n             file.write(html)\n \n"
                },
                {
                    "date": 1730125082308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n def find_unpadded_model(base_path):\n     for root, dirs, files in os.walk(base_path):\n         for dir_name in dirs:\n-            if \"_snapshots_\" in dir_name:\n+            if \"_snapshots_\" in dir_name and \"_exp_\" in dir_name:\n                 the_path = os.path.join(root, dir_name)\n                 param_df = pd.read_csv(f\"{the_path}/parameters.txt\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n                 if int(param_df.loc[\"end_buffer\"].value) == 0:\n                     print(f\"Found unpadded model at {the_path}\")\n@@ -59,8 +59,9 @@\n         ds(\"Getting snapshot params\")\n         global kb_model\n         \n         self.pull_param_vals()\n+        # should get self.threshold_in_days, self.start_month, self.end_month, self.start_year, self.end_year\n         \n         ds(\"Reading exp_df\")\n         exp_df = load_pickle_or_parquet(f\"{self.base_path}/{self.subreddit}/{self.subreddit}_df_exp_true.parquet\")\n             \n@@ -87,9 +88,13 @@\n         score_df = score_df[score_df[\"true_date\"] <= end_date]\n         \n         self.overall_mean = score_df[\"experience\"].mean()\n         self.overall_median = score_df[\"experience\"].median()\n+\n+        above_threshold = score_df[score_df[\"experience\"] > self.threshold_in_days]\n+        self.overall_fract = len(above_threshold) / len(score_df)\n         overall = {\n+            \"fraction\": round(self.overall_fract, 3),\n             \"mean\": round(self.overall_mean, 1),\n             \"median\": round(self.overall_median, 1),\n             \"k\": round(exp_df[\"dt\"].mean(), 1)\n         }\n@@ -102,28 +107,33 @@\n             \n             for month in range(smonth, emonth + 1):\n                 ds(f\"Processing year {year} month {month}\")\n                 month_df = score_df[(score_df['true_date'].dt.year == year) & (score_df['true_date'].dt.month == month)]\n+                above_threshold = month_df[month_df[\"experience\"] > self.threshold_in_days]\n+                fract = len(above_threshold) / len(month_df)\n                 avg_exp = month_df[\"experience\"].mean()\n                 median_exp = month_df[\"experience\"].median()\n                 if not np.isnan(avg_exp):\n                     avg_exp = round(avg_exp, 1)\n                 if not np.isnan(median_exp):\n                     median_exp = round(median_exp, 1)\n                 result_list.append({\n+                    \"fraction\": round(fract, 3),\n                     \"true_month\": f\"{year}-{month}\",\n                     \"avg_exp\": avg_exp,\n                     \"median_exp\": median_exp\n                 })\n         \n         self.result_df = pd.DataFrame(result_list)\n         html = html_table(overall) + html_table(self.result_df)\n         self.result_df.to_parquet(f\"{self.base_path}/{self.subreddit}/{self.subreddit}_exp_by_month.parquet\")\n+        html += plot_trajectory(self.result_df, \"true_month\", \"fraction\", marker_size=8)\n         html += plot_trajectory(self.result_df, \"true_month\", \"avg_exp\", marker_size=8)\n+        html += plot_trajectory(self.result_df, \"true_month\", \"median_exp\", marker_size=8)\n         with open(f\"{self.base_path}/{self.subreddit}/exp_by_month.html\", 'w') as file:\n             file.write(html)\n \n if __name__ == '__main__':\n     print(\"starting\")\n-    # subreddit, base_path\n+    # subreddit, base_path, threshold_in_days\n     Tile = ExploreExperience(sys.argv[1], sys.argv[2])\n     Tile.render_content()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730125266866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     for root, dirs, files in os.walk(base_path):\n         for dir_name in dirs:\n             if \"_snapshots_\" in dir_name and \"_exp_\" in dir_name:\n                 the_path = os.path.join(root, dir_name)\n-                param_df = pd.read_csv(f\"{the_path}/parameters.txt\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n+                param_df = pd.read_csv(f\"{the_path}/parameters.txt\", engine=\"python\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n                 if int(param_df.loc[\"end_buffer\"].value) == 0:\n                     print(f\"Found unpadded model at {the_path}\")\n                     return the_path\n     return None  # \n"
                },
                {
                    "date": 1730125282540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     def display_status(self, text):\n         print(text)\n \n     def pull_param_vals(self):\n-        param_df = pd.read_csv(f\"{self.snapshot_folder}/parameters.txt\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n+        param_df = pd.read_csv(f\"{self.snapshot_folder}/parameters.txt\", engine=\"python\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n         keys = param_df.index.tolist()\n         for key in keys:\n             setattr(self, key, param_df.loc[key].value)\n         return\n"
                },
                {
                    "date": 1730125318536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n         ds(\"Getting snapshot params\")\n         global kb_model\n         \n         self.pull_param_vals()\n+        self.threshold_in_days = int(self.threshold_in_days)\n         # should get self.threshold_in_days, self.start_month, self.end_month, self.start_year, self.end_year\n         \n         ds(\"Reading exp_df\")\n         exp_df = load_pickle_or_parquet(f\"{self.base_path}/{self.subreddit}/{self.subreddit}_df_exp_true.parquet\")\n"
                },
                {
                    "date": 1730125519792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,10 @@\n             \n             for month in range(smonth, emonth + 1):\n                 ds(f\"Processing year {year} month {month}\")\n                 month_df = score_df[(score_df['true_date'].dt.year == year) & (score_df['true_date'].dt.month == month)]\n+                if len(month_df) == 0:\n+                    continue\n                 above_threshold = month_df[month_df[\"experience\"] > self.threshold_in_days]\n                 fract = len(above_threshold) / len(month_df)\n                 avg_exp = month_df[\"experience\"].mean()\n                 median_exp = month_df[\"experience\"].median()\n"
                },
                {
                    "date": 1731429122661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,10 @@\n+### This script \n+### Outputs:\n+###     - {subreddit}_exp_by_month.html: The experience by month report for the subreddit.\n+###     - {subreddit}_exp_by_month.parquet: The results of the analysis saved in a parquet file.\n+###            This has columns: fraction, true_month, avg_exp, median_exp\n+\n print(\"starting\")\n import pickle\n import json\n import sys\n"
                }
            ],
            "date": 1730054004901,
            "name": "Commit-0",
            "content": "print(\"starting\")\nimport pickle\nimport json\nimport sys\nimport os\nimport re\nimport datetime\nimport pandas as pd\nimport numpy as np\n\ndef load_pickle_or_parquet(path):\n    fname, ext = os.path.splitext(path)\n    if ext == \".parquet\":\n        return pd.read_parquet(path)\n    else:\n        return pd.read_pickle(path)\n    \n\nprint(\"done with globals\")\nclass ExploreExperience():\n    def __init__(self, subreddit, uid, base_path):\n        self.subreddit = subreddit\n        self.uid = uid\n        self.base_path = base_path\n        self.snapshot_folder = f\"{base_path}/{subreddit}/{subreddit}_snapshots/{uid}\"\n        return\n\n    def display_status(self, text):\n        print(text)\n\n    def html_table(self, text):\n        print(text)\n\n    def get_parameters(self):\n        plist = []\n        for opt_name in self.option_names:\n            plist.append({\"name\": opt_name, \"value\": getattr(self, opt_name)})\n        return plist\n\n    def pull_param_vals(self):\n        param_df = pd.read_csv(f\"{self.snapshot_folder}/parameters.txt\", sep=\":\\t\", names=[\"key\", \"value\"], index_col=\"key\")\n        keys = param_df.index.tolist()\n        for key in keys:\n            setattr(self, key, param_df.loc[key].value)\n        return\n    \n    \n    \n        \n        \n    def render_content(self):\n        ds(\"Getting snapshot params\")\n        global kb_model\n        \n        self.pull_param_vals()\n        \n        base_path = \"/mydisk/reddit\"\n        bn = os.path.basename(self.snapshot_folder)\n        subreddit = re.findall(\"^(.*?)_snapshots\", bn)[0]\n        \n        ds(\"Reading exp_df\")\n        exp_df = load_pickle_or_parquet(f\"{base_path}/{subreddit}/{subreddit}_df_exp_true.parquet\")\n            \n        score_start = f\"{subreddit}_scored\"\n        score_df = None\n        for item in os.listdir(self.snapshot_folder):\n            if item.startswith(score_start):\n                ds(\"Reading score_df\")\n                score_df = load_pickle_or_parquet(os.path.join(self.snapshot_folder, item))\n                break\n        if score_df is None:\n            return \"Didn't find score_df\"\n            \n        score_df[\"experience\"] = exp_df[\"experience\"]\n        score_df = score_df.dropna(subset=['experience'])\n        smonth_num = int(self.start_month)\n        emonth_num = int(self.end_month)\n        self.start_year = int(self.start_year)\n        self.end_year = int(self.end_year)\n        \n        start_date = datetime.datetime(self.start_year, smonth_num, 1)\n        end_date = datetime.datetime(self.end_year, emonth_num, 1)\n        score_df = score_df[score_df[\"true_date\"] >= start_date]\n        score_df = score_df[score_df[\"true_date\"] <= end_date]\n        \n        self.overall_mean = score_df[\"experience\"].mean()\n        self.overall_median = score_df[\"experience\"].median()\n        overall = {\n            \"mean\": round(self.overall_mean, 1),\n            \"median\": round(self.overall_median, 1),\n            \"k\": round(exp_df[\"dt\"].mean(), 1)\n        }\n        \n        result_list = []\n        \n        for year in range(self.start_year, self.end_year + 1):\n            smonth = smonth_num if year == self.start_year else 1\n            emonth = emonth_num if year == self.end_year else 12\n            \n            for month in range(smonth, emonth + 1):\n                ds(f\"Processing year {year} month {month}\")\n                month_df = score_df[(score_df['true_date'].dt.year == year) & (score_df['true_date'].dt.month == month)]\n                avg_exp = month_df[\"experience\"].mean()\n                median_exp = month_df[\"experience\"].median()\n                if not np.isnan(avg_exp):\n                    avg_exp = round(avg_exp, 1)\n                if not np.isnan(median_exp):\n                    median_exp = round(median_exp, 1)\n                result_list.append({\n                    \"true_month\": f\"{year}-{month}\",\n                    \"avg_exp\": avg_exp,\n                    \"median_exp\": median_exp\n                })\n        \n        self.result_df = pd.DataFrame(result_list)\n        the_html = self.html_table(overall) + self.html_table(self.result_df)\n        results = {\n            \"result_df\": getattr(Tile, \"result_df\"),\n            \"overall_median\": getattr(Tile, \"overall_median\"),\n            \"overall_mean\": getattr(Tile, \"overall_mean\"),\n            \"parameters\": self.get_parameters()\n        }\n        if self.output_file is not None:\n            f = open(self.output_file, \"wb\")\n            pickle.dump(results, f)\n            f.close()\n            return\n        else:\n            return results\n\nif __name__ == '__main__':\n    print(\"starting\")\n    # subreddit, uid, base_path\n    Tile = ExploreExperience(sys.argv[1], sys.argv[2], sys.argv[3])\n    Tile.render_content()"
        }
    ]
}